<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">

    <title>Collapsible Tree Example</title>

    <style>

        .node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 3px;
        }

        .node text {
            font: 12px sans-serif;
        }

        .link {
            fill: none;
            stroke: #ccc;
            stroke-width: 2px;
        }

    </style>

</head>

<body>

<!-- load the d3.js library -->
<script src="http://d3js.org/d3.v3.min.js"></script>

<script>

    // Default structure (applies to everyone)

    // Get titles and populate in array
    // myArray["Matt Danforth"] = "Director";

    // Fill in the data

    // function sendOrgChart(arrayOfPeople, object)

    // Click Example
    // http://bl.ocks.org/d3noob/8375092
    var treeData = [
        {"name": "Matt Danforth|Sr Dir, Web Development", "parent": "null", "children": [
            {"name": "Jose Pulgar|Mgr, Front End Development", "parent": "Matt Danforth|Sr Dir, Web Development", "children": [
                {"name": "Alex Miramontes|Web Developer I", "parent": "Jose Pulgar|Mgr, Front End Development"},
                {"name": "Felix Jung|Sr Web Developer", "parent": "Jose Pulgar|Mgr, Front End Development"},
                {"name": "Maureen Vana|Web Developer II", "parent": "Jose Pulgar|Mgr, Front End Development"},
                {"name": "Jennifer Stander|Web Developer", "parent": "Jose Pulgar|Mgr, Front End Development"}
            ]}
        ]}
    ];


    // ************** Generate the tree diagram  *****************
    var margin = {top: 20, right: 120, bottom: 20, left: 160},
            width = 860 - margin.right - margin.left,
            height = 700 - margin.top - margin.bottom;

    var i = 0;

    var tree = d3.layout.tree()
            .size([height, width]);

    var diagonal = d3.svg.diagonal()
            .projection(function (d) {
                return [d.y, d.x];
            });

    var svg = d3.select("body").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    root = treeData[0];

    update(root);

    function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function (d) {
            d.y = d.depth * 180;
        });

        // Declare the nodesâ€¦
        var node = svg.selectAll("g.node")
                .data(nodes, function (d) {
                    return d.id || (d.id = ++i);
                });

        // Enter the nodes.
        var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) {
                    return "translate(" + d.y + "," + d.x + ")";
                });

        // Add the circle
        nodeEnter.append("circle")
                .attr("r", 10)
                .style("fill", "#ff0");

        // Employee Name
        nodeEnter.append("text")
                .attr("x", function (d) {
                    return d.children || d._children ? -13 : 13;
                })
                .attr("y", -6)
                .attr("dy", ".35em")
                .attr("text-anchor", function (d) {
                    return d.children || d._children ? "end" : "start";
                })
                .text(function (d) {
                    // Do a check here, if children are undefined show both
                    var nameTitle = d.name.split('|');
                    if (d.children === undefined) {
                        return nameTitle[0];
                    } else {
                        return nameTitle[0];
                    }
                })
                .style("font-weight", "bold")
                .style("fill-opacity", 1);

        // Employee Title
        nodeEnter.append("text")
                .attr("x", function (d) {
                    return d.children || d._children ? -13 : 13;
                })
                .attr("y", -6)
                .attr("dy", "1.5em")
                .attr("text-anchor", function (d) {
                    return d.children || d._children ? "end" : "start";
                })
                .text(function (d) {
                    // Do a check here, if children are undefined show both
                    var nameTitle = d.name.split('|');
                    if (d.children === undefined) {
                        return nameTitle[1];
                    } else {
                        return nameTitle[1];
                    }
                })
                .style("fill-opacity", 1);

        // Declare the links
        var link = svg.selectAll("path.link")
                .data(links, function (d) {
                    return d.target.id;
                });

        // Enter the links.
        link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", diagonal);

    }

</script>

</body>
</html>
